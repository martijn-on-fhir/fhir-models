import 'reflect-metadata';
import { BackboneElement } from '../base/BackboneElement';
import { Element } from '../base/Element';
import { Age } from '../elements/Age';
import { CodeableConcept } from '../elements/CodeableConcept';
import { Duration } from '../elements/Duration';
import { Period } from '../elements/Period';
import { Reference } from '../elements/Reference';
import { RelatedArtifact } from '../elements/RelatedArtifact';
import { RequestGroupActionCondition } from './RequestGroupActionCondition';
import { RequestGroupActionRelatedAction } from './RequestGroupActionRelatedAction';
export declare class RequestGroupAction extends BackboneElement {
    action?: RequestGroupAction[];
    cardinalityBehavior?: ('single' | 'multiple');
    _cardinalityBehavior?: Element;
    code?: CodeableConcept[];
    condition?: RequestGroupActionCondition[];
    description?: string;
    _description?: Element;
    documentation?: RelatedArtifact[];
    groupingBehavior?: ('visual-group' | 'logical-group' | 'sentence-group');
    _groupingBehavior?: Element;
    participant?: Reference[];
    precheckBehavior?: ('yes' | 'no');
    _precheckBehavior?: Element;
    prefix?: string;
    _prefix?: Element;
    priority?: ('routine' | 'urgent' | 'asap' | 'stat');
    _priority?: Element;
    relatedAction?: RequestGroupActionRelatedAction[];
    requiredBehavior?: ('must' | 'could' | 'must-unless-documented');
    _requiredBehavior?: Element;
    resource?: Reference;
    selectionBehavior?: ('any' | 'all' | 'all-or-none' | 'exactly-one' | 'at-most-one' | 'one-or-more');
    _selectionBehavior?: Element;
    textEquivalent?: string;
    _textEquivalent?: Element;
    timingDateTime?: string;
    _timingDateTime?: Element;
    timingAge?: Age;
    timingPeriod?: Period;
    timingDuration?: Duration;
    constructor(source?: Partial<RequestGroupAction>);
}
//# sourceMappingURL=RequestGroupAction.d.ts.map