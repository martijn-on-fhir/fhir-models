import 'reflect-metadata';
import { DomainResource } from '../base/DomainResource';
import { Element } from '../base/Element';
import { Attachment } from '../elements/Attachment';
import { ClaimResponseAddItem } from '../backbone/ClaimResponseAddItem';
import { ClaimResponseError } from '../backbone/ClaimResponseError';
import { ClaimResponseInsurance } from '../backbone/ClaimResponseInsurance';
import { ClaimResponseItem } from '../backbone/ClaimResponseItem';
import { ClaimResponseItemAdjudication } from '../backbone/ClaimResponseItemAdjudication';
import { ClaimResponsePayment } from '../backbone/ClaimResponsePayment';
import { ClaimResponseProcessNote } from '../backbone/ClaimResponseProcessNote';
import { CodeableConcept } from '../elements/CodeableConcept';
import { Identifier } from '../elements/Identifier';
import { Period } from '../elements/Period';
import { Reference } from '../elements/Reference';
export declare class ClaimResponse extends DomainResource {
    readonly resourceType: "ClaimResponse";
    addItem?: ClaimResponseAddItem[];
    adjudication?: ClaimResponseItemAdjudication[];
    communicationRequest?: Reference[];
    created?: string;
    _created?: Element;
    disposition?: string;
    _disposition?: Element;
    error?: ClaimResponseError[];
    form?: Attachment;
    formCode?: CodeableConcept;
    fundsReserve?: CodeableConcept;
    identifier?: Identifier[];
    insurance?: ClaimResponseInsurance[];
    insurer?: Reference;
    item?: ClaimResponseItem[];
    outcome?: ('queued' | 'complete' | 'error' | 'partial');
    _outcome?: Element;
    patient?: Reference;
    payeeType?: CodeableConcept;
    payment?: ClaimResponsePayment;
    preAuthPeriod?: Period;
    preAuthRef?: string;
    _preAuthRef?: Element;
    processNote?: ClaimResponseProcessNote[];
    request?: Reference;
    constructor(source?: Partial<ClaimResponse>);
}
//# sourceMappingURL=ClaimResponse.d.ts.map