import 'reflect-metadata';
import { BackboneElement } from '../base/BackboneElement';
import { Annotation } from '../elements/Annotation';
import { CodeableConcept } from '../elements/CodeableConcept';
import { ContractTermActionSubject } from './ContractTermActionSubject';
import { Period } from '../elements/Period';
import { Reference } from '../elements/Reference';
import { Timing } from './Timing';
export declare class ContractTermAction extends BackboneElement {
    context?: Reference;
    contextLinkId?: string[];
    _contextLinkId?: Element[];
    doNotPerform?: boolean;
    _doNotPerform?: Element;
    intent?: CodeableConcept;
    linkId?: string[];
    _linkId?: Element[];
    note?: Annotation[];
    occurrenceDateTime?: string;
    _occurrenceDateTime?: Element;
    occurrencePeriod?: Period;
    occurrenceTiming?: Timing;
    performer?: Reference;
    performerLinkId?: string[];
    _performerLinkId?: Element[];
    performerRole?: CodeableConcept;
    performerType?: CodeableConcept[];
    reason?: string[];
    _reason?: Element[];
    reasonCode?: CodeableConcept[];
    reasonLinkId?: string[];
    _reasonLinkId?: Element[];
    reasonReference?: Reference[];
    requester?: Reference[];
    requesterLinkId?: string[];
    _requesterLinkId?: Element[];
    securityLabelNumber?: number[];
    status?: CodeableConcept;
    subject?: ContractTermActionSubject[];
    constructor(source?: Partial<ContractTermAction>);
}
//# sourceMappingURL=ContractTermAction.d.ts.map